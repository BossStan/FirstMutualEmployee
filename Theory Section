1. DI is a subtype of IOC

# IOC is a generic term, rather than having the application call the methods in a framework,the framework calls
  implementations provided by the application.
#DI is a form of IOC, where implementations are passed into an object through constructors/setters/service look-ups,
   which the object will 'depend' on in order to behave correctly

2.Tomcat

3.Application Properties

4. @Bean

5. a

6. a)Purpose of @Contoller is to create a Map of model object and find a view but the purpose of @RestContoller is
     to return the object and object data is directly written into HTTP response as JSON or XML.

   b)@RequestParam is used for accessing the values of the query parameters where as @PathVariable used for accessing
      the values from the URI template.

   c) @ResponseEntiry is a generic class with a type parameter, you can specify what type of object to be serialized
       into the response body whereas @ResponseBody is an annotation, indicates that the return value of a method will
       be serialized into the body of the HTTP response

   d)@Comonent: We use @Component across the application to mark the beans as Spring's managed components. Spring will
       only pick up and register beans with @Component, and doesn't look for @Service and @Repository in general.

     @Service: beans are marked with @Service to indicate that they're holding the business logic. Mainly used in the
       service layer

     @Repository is used to catch persistence-specific exceptions and re-throw them as one of Springâ€™s unified unchecked
     exceptions.Spring provides PersistenceExceptionTranslationPostProcessor, which we are required to add in our application
     context (already included if we're using Spring Boot)

7. Spring Batch

8. Spring Cloud Load Balancer